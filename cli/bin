#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const homedir = require('os').homedir()
const spawn = require('child_process').spawn
const help = require('./help.js')
const argv = require('minimist')(process.argv.slice(2), {
  alias: {
    h: 'help',
    v: 'version',
    p: 'port'
  }
})

const pidFile = path.join(homedir, '.nace.pid')
const logFile = path.join(homedir, '.nace.log')
const naceIndex = path.join(__dirname, '../index.js')

switch (argv._[0]) {
  case 'start':
    startNace()
    break
  case 'stop':
    stopNace()
    break
  case 'check':
    checkNace()
    break
  default:
    help.printHelp()
}

function startNace () {

  try {
    const pid = fs.readFileSync(pidFile, 'utf-8')
    if (checkProcess(pid)) {
      console.log('\x1b[31;1m✗\x1b[0m nace is running. '
      + 'Try `nace stop` before starting new nace server.')
      return false
    }
  } catch (e) {}

  // clean logfile
  fs.writeFileSync(logFile, '')

  const outFD = fs.openSync(logFile, 'a')
  const errFD = fs.openSync(logFile, 'a')

  // start the engine
  const port = argv.port || '3300'
  const child = spawn(process.argv[0], [naceIndex, '-p', port], {
    detached: true,
    stdio: ['ipc', outFD, errFD]
  })
  child.unref()

  child.on('message', msg => {
    switch (msg) {
      case 'success':
        console.log('\x1b[32;1m✓\x1b[0m nace started.')
        fs.writeFileSync(pidFile, child.pid)
        break;
      default:
        console.log("\x1b[41;30m ERR \x1b[0m", msg)
    }
    process.exit()
  })
}

function stopNace () {
  try {
    const pid = fs.readFileSync(pidFile, 'utf-8')
    process.kill(pid)
    console.log('\x1b[32;1m✗\x1b[0m nace stopped.')
  } catch (e) {
    process.exit(1)
  }
  process.exit()
}

function checkNace () {
  try {
    const pid = fs.readFileSync(pidFile, 'utf-8')
    process.kill(pid, 0)
    console.log('\x1b[32;1m✓\x1b[0m nace is running.')
    return true
  }
  catch (err) {
    console.log('\x1b[31;1m✗\x1b[0m nace is not running.')
    return false
  }
}

function checkProcess (pid) {
  if (!pid) {
    return false
  }

  try {
    process.kill(pid, 0)
    return true
  }
  catch (err) {
    return false
  }
}
